package main

import (
	"bufio"
	"embed"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"

	"github.com/davi4046/revoutil"
)

//go:embed revocomp.yaml
//go:embed {{.XSDFileName}}
var files embed.FS

func main() {
	if len(os.Args) == 2 {
		if os.Args[1] == "info" {
			data, _ := files.ReadFile("revocomp.yaml")
			fmt.Println(string(data))
			return
		} else if os.Args[1] == "xsd" {
			data, _ := files.ReadFile("{{.XSDFileName}}")
			fmt.Println(string(data))
			return
		}
	}
	if len(os.Args) == {{.NArgs}} {

		{{.Conversions}}

		modifier := NewModifier({{.Args}})

		reader := bufio.NewReader(os.Stdin)

		for {
			input, err := reader.ReadString('\n')
			if err != nil {
				log.Fatalln(err)
			}

			input = strings.TrimSpace(input)

			if input == "finish" { fmt.Println(modifier.Finish()); return }

			input = strings.Trim(input, "{}")

			parts := strings.Split(input, " ")

			value, err := strconv.Atoi(parts[0])
			if err != nil {
				log.Fatalln(err)
			}

			duration, err := strconv.ParseFloat(parts[1], 64)
			if err != nil {
				log.Fatalln(err)
			}

			channel, err := strconv.Atoi(parts[2])
			if err != nil {
				log.Fatalln(err)
			}

			track, err := strconv.Atoi(parts[3])
			if err != nil {
				log.Fatalln(err)
			}

			isPause, err := strconv.ParseBool(parts[4])
			if err != nil {
				log.Fatalln(err)
			}

			fmt.Println(modifier.Modify(
				revoutil.Note{
					Value:    value,
					Duration: duration,
					Channel:  channel,
					Track:    track,
					IsPause:  isPause,
				},
			))
		}
	}
}
