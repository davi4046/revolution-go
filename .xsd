<xs:schema targetNamespace="http://www.w3schools.com"
    elementFormDefault="qualified"
    xmlns="http://www.w3schools.com"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:tns="http://www.w3schools.com">

    <xs:element name="Composition">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="Definitions" />
                <xs:element ref="Score" />
            </xs:sequence>
        </xs:complexType>

        <xs:key name="genId">
            <xs:selector xpath="tns:Definitions/tns:GenDef" />
            <xs:field xpath="@genId" />
        </xs:key>
        <xs:key name="modId">
            <xs:selector xpath="tns:Definitions/tns:ModDef" />
            <xs:field xpath="@modId" />
        </xs:key>

        <xs:keyref name="genIdref" refer="genId">
            <xs:selector xpath="tns:Score/tns:Channels/tns:Channel/tns:Track/tns:Gen" />
            <xs:field xpath="@genIdref" />
        </xs:keyref>
        <xs:keyref name="modIdref" refer="modId">
            <xs:selector xpath="tns:Score/tns:Channels/tns:Channel/tns:Track/tns:Mod" />
            <xs:field xpath="@modIdref" />
        </xs:keyref>
    </xs:element>

    <xs:element name="Definitions">
        <xs:annotation>
            <xs:documentation> Define any generators and modifiers to be used in the composition
                here. </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="GenDef" minOccurs="0" maxOccurs="unbounded" />
                <xs:element ref="ModDef" minOccurs="0" maxOccurs="unbounded" />
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="GenDef">
        <xs:annotation>
            <xs:documentation> Assign an ID to a configured generator. </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice>

            </xs:choice>
            <xs:attribute name="genId" type="xs:string" use="required" />
        </xs:complexType>
    </xs:element>

    <xs:element name="ModDef">
        <xs:annotation>
            <xs:documentation> Assign an ID to a configured modifier. </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice>

            </xs:choice>
            <xs:attribute name="modId" type="xs:string" use="required" />
        </xs:complexType>
    </xs:element>

    <xs:element name="Score">
        <xs:annotation>
            <xs:documentation> The score is where the structure of the composition is to be
                specified. </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="Key" />
                <xs:element ref="KeyChanges" />
                <xs:element ref="Channels" />
            </xs:sequence>
        </xs:complexType>
        <xs:unique name="beat-must-be-unique">
            <xs:selector xpath="tns:KeyChange" />
            <xs:field xpath="@beat" />
        </xs:unique>
    </xs:element>

    <xs:element name="Channels">
        <xs:annotation>
            <xs:documentation> Holds all channels. </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="Channel" minOccurs="0" maxOccurs="unbounded" />
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="Channel">
        <xs:annotation>
            <xs:documentation> A channel is the equivelant of a system on a music partitura. </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="Track" />
            </xs:sequence>
            <xs:attribute name="instrument" type="xs:string" default="piano">
                <xs:annotation>
                    <xs:documentation> The sound to be used during playback. Default is piano. </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>

    <xs:element name="Track">
        <xs:annotation>
            <xs:documentation> A track is the equivelant of a stave on a music partitura. </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="Gen" />
                <xs:element ref="Mod" />
            </xs:choice>
        </xs:complexType>
    </xs:element>

    <xs:element name="Gen">
        <xs:annotation>
            <xs:documentation> Generate a specified length of material using the referenced
                generator and put it on the track. </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="genIdref"
                type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation> Must reference a valid ID of a GenDef under Definitions. </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="beat"
                type="xs:float" use="required">
                <xs:annotation>
                    <xs:documentation> Defines the beat at which the generation starts internally
                        (not on the track). </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="length"
                type="xs:float" use="required">
                <xs:annotation>
                    <xs:documentation> Defines the length of the generation (in beats). </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="add" type="xs:float"
                default="0" />
        </xs:complexType>
    </xs:element>

    <xs:element name="Mod">
        <xs:annotation>
            <xs:documentation> Send part of the generated material on this track to be modified by
                the referenced modifier. </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="modIdref"
                type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation> Must reference a valid ID of a ModDef under Definitions. </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="beat"
                type="xs:float" use="required">
                <xs:annotation>
                    <xs:documentation> Defines the start of the part-to-be-modified. </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="length"
                type="xs:float" use="required">
                <xs:annotation>
                    <xs:documentation> Defines the length of the part-to-be-modified (in beats). </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>

    <xs:element name="KeyChanges">
        <xs:annotation>
            <xs:documentation> Holds any key change. </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="KeyChange" minOccurs="0" maxOccurs="unbounded" />
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="KeyChange">
        <xs:annotation>
            <xs:documentation> Any generator output after this key change will be interpreted in the
                provided key until another key change is defined. </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:all>
                <xs:element ref="Key" />
            </xs:all>
            <xs:attribute name="beat" use="required">
                <xs:annotation>
                    <xs:documentation> The beat on which the key change takes effect. </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:float">
                        <xs:minExclusive value="0" />
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>

    <xs:element name="Key">
        <xs:annotation>
            <xs:documentation> A music key. Any generator output will be interpreted in the
                concurrent key. </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="Root" use="required">
                <xs:annotation>
                    <xs:documentation> The root pitchclass of the key. </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="A" />
                        <xs:enumeration value="B" />
                        <xs:enumeration value="C" />
                        <xs:enumeration value="D" />
                        <xs:enumeration value="E" />
                        <xs:enumeration value="F" />
                        <xs:enumeration value="G" />
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="Mode" use="required">
                <xs:annotation>
                    <xs:documentation> The mode of the key. </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="Major" />
                        <xs:enumeration value="Minor" />
                        <xs:enumeration value="Ionian" />
                        <xs:enumeration value="Dorian" />
                        <xs:enumeration value="Phrygian" />
                        <xs:enumeration value="Lydian" />
                        <xs:enumeration value="Mixolydian" />
                        <xs:enumeration value="Aeolian" />
                        <xs:enumeration value="Locrian" />
                        <xs:enumeration value="Chromatic" />
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
</xs:schema>